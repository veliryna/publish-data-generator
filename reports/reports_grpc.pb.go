// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: reports/reports.proto

package reports

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReportService_StreamTimeBasedReports_FullMethodName  = "/reports.ReportService/StreamTimeBasedReports"
	ReportService_StreamEventBasedReports_FullMethodName = "/reports.ReportService/StreamEventBasedReports"
	ReportService_MuteDevice_FullMethodName              = "/reports.ReportService/MuteDevice"
	ReportService_UnmuteDevice_FullMethodName            = "/reports.ReportService/UnmuteDevice"
	ReportService_GetDeviceStatuses_FullMethodName       = "/reports.ReportService/GetDeviceStatuses"
)

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportServiceClient interface {
	// stream time-based and event-based reports
	StreamTimeBasedReports(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TimeBasedReport], error)
	StreamEventBasedReports(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventBasedReport], error)
	// control device mute state
	MuteDevice(ctx context.Context, in *DeviceControlRequest, opts ...grpc.CallOption) (*DeviceControlResponse, error)
	UnmuteDevice(ctx context.Context, in *DeviceControlRequest, opts ...grpc.CallOption) (*DeviceControlResponse, error)
	// current mute/unmute status of all devices
	GetDeviceStatuses(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DeviceStatusResponse, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) StreamTimeBasedReports(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TimeBasedReport], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReportService_ServiceDesc.Streams[0], ReportService_StreamTimeBasedReports_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, TimeBasedReport]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReportService_StreamTimeBasedReportsClient = grpc.ServerStreamingClient[TimeBasedReport]

func (c *reportServiceClient) StreamEventBasedReports(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventBasedReport], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReportService_ServiceDesc.Streams[1], ReportService_StreamEventBasedReports_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, EventBasedReport]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReportService_StreamEventBasedReportsClient = grpc.ServerStreamingClient[EventBasedReport]

func (c *reportServiceClient) MuteDevice(ctx context.Context, in *DeviceControlRequest, opts ...grpc.CallOption) (*DeviceControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceControlResponse)
	err := c.cc.Invoke(ctx, ReportService_MuteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) UnmuteDevice(ctx context.Context, in *DeviceControlRequest, opts ...grpc.CallOption) (*DeviceControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceControlResponse)
	err := c.cc.Invoke(ctx, ReportService_UnmuteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetDeviceStatuses(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DeviceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceStatusResponse)
	err := c.cc.Invoke(ctx, ReportService_GetDeviceStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
// All implementations must embed UnimplementedReportServiceServer
// for forward compatibility.
type ReportServiceServer interface {
	// stream time-based and event-based reports
	StreamTimeBasedReports(*EmptyRequest, grpc.ServerStreamingServer[TimeBasedReport]) error
	StreamEventBasedReports(*EmptyRequest, grpc.ServerStreamingServer[EventBasedReport]) error
	// control device mute state
	MuteDevice(context.Context, *DeviceControlRequest) (*DeviceControlResponse, error)
	UnmuteDevice(context.Context, *DeviceControlRequest) (*DeviceControlResponse, error)
	// current mute/unmute status of all devices
	GetDeviceStatuses(context.Context, *EmptyRequest) (*DeviceStatusResponse, error)
	mustEmbedUnimplementedReportServiceServer()
}

// UnimplementedReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportServiceServer struct{}

func (UnimplementedReportServiceServer) StreamTimeBasedReports(*EmptyRequest, grpc.ServerStreamingServer[TimeBasedReport]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTimeBasedReports not implemented")
}
func (UnimplementedReportServiceServer) StreamEventBasedReports(*EmptyRequest, grpc.ServerStreamingServer[EventBasedReport]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEventBasedReports not implemented")
}
func (UnimplementedReportServiceServer) MuteDevice(context.Context, *DeviceControlRequest) (*DeviceControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteDevice not implemented")
}
func (UnimplementedReportServiceServer) UnmuteDevice(context.Context, *DeviceControlRequest) (*DeviceControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteDevice not implemented")
}
func (UnimplementedReportServiceServer) GetDeviceStatuses(context.Context, *EmptyRequest) (*DeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatuses not implemented")
}
func (UnimplementedReportServiceServer) mustEmbedUnimplementedReportServiceServer() {}
func (UnimplementedReportServiceServer) testEmbeddedByValue()                       {}

// UnsafeReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportServiceServer will
// result in compilation errors.
type UnsafeReportServiceServer interface {
	mustEmbedUnimplementedReportServiceServer()
}

func RegisterReportServiceServer(s grpc.ServiceRegistrar, srv ReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportService_ServiceDesc, srv)
}

func _ReportService_StreamTimeBasedReports_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServiceServer).StreamTimeBasedReports(m, &grpc.GenericServerStream[EmptyRequest, TimeBasedReport]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReportService_StreamTimeBasedReportsServer = grpc.ServerStreamingServer[TimeBasedReport]

func _ReportService_StreamEventBasedReports_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServiceServer).StreamEventBasedReports(m, &grpc.GenericServerStream[EmptyRequest, EventBasedReport]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReportService_StreamEventBasedReportsServer = grpc.ServerStreamingServer[EventBasedReport]

func _ReportService_MuteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).MuteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_MuteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).MuteDevice(ctx, req.(*DeviceControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_UnmuteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).UnmuteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_UnmuteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).UnmuteDevice(ctx, req.(*DeviceControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetDeviceStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetDeviceStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetDeviceStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetDeviceStatuses(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportService_ServiceDesc is the grpc.ServiceDesc for ReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reports.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MuteDevice",
			Handler:    _ReportService_MuteDevice_Handler,
		},
		{
			MethodName: "UnmuteDevice",
			Handler:    _ReportService_UnmuteDevice_Handler,
		},
		{
			MethodName: "GetDeviceStatuses",
			Handler:    _ReportService_GetDeviceStatuses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTimeBasedReports",
			Handler:       _ReportService_StreamTimeBasedReports_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEventBasedReports",
			Handler:       _ReportService_StreamEventBasedReports_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "reports/reports.proto",
}
